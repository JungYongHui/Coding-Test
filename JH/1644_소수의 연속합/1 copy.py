"""Solution code for "BOJ 1644. 소수의 연속합".

- Problem link: https://www.acmicpc.net/problem/1644
- Solution link: http://www.teferi.net/ps/problems/boj/1644

Tags: [Sieve] [TwoPointer]

(This code was generated by Import Inliner v0.3)
"""

import math
from typing import List


# >>>[BEGIN] teflib.numtheory.prime_list [v1.2] (Copied from teflib/numtheory.py)<<<
def prime_list(a: int, b: int = -1) -> List[int]:
    """Returns a list of prime numbers up to the given integer."""
    start, limit = (1, a) if b == -1 else (a, b)
    if limit < 3:
        return [2] if limit == 2 else []
    size = (limit - 3) // 2
    is_prime = [True] * (size + 1)
    for i in range(math.isqrt(limit - 3) // 2 + 1):
        if is_prime[i]:
            p = i + i + 3
            s = p * (i + 1) + i
            is_prime[s::p] = [False] * ((size - s) // p + 1)
    start_pos = 0 if start == 1 else (start - 2) // 2
    s = start_pos * 2 + 3
    ans = [] if start > 2 else [2]
    return ans + [i + i + s for i, v in enumerate(is_prime[start_pos:]) if v]
# >>>[END] teflib.numtheory.prime_list [v1.2]<<<


def main():
    N = int(input())

    primes = prime_list(N)
    left_iter = iter(primes)
    right_iter = iter(primes)
    prime_sum = 0
    answer = 0
    while True:
        try:
            if prime_sum == N:
                answer += 1
            if prime_sum <= N:
                prime_sum += next(right_iter)
            else:
                prime_sum -= next(left_iter)
        except StopIteration:
            break

    print(answer)


if __name__ == '__main__':
    main()